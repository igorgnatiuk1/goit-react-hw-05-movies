{"version":3,"sources":["views/MovieReviewsView.js"],"names":["MovieReviewesView","movieId","useState","reviews","setReviews","useEffect","fetchMovieReviews","then","data","results","length","map","review","author","content","id"],"mappings":"0NAKe,SAASA,EAAT,GAAyC,IAAZC,EAAW,EAAXA,QACxC,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,qBAAU,WACNC,YAAkBL,GAASM,MAAK,SAAAC,GAAI,OAAIJ,EAAWI,EAAKC,cACzD,CAACR,IAGA,mCACQE,EAAQO,OAAS,EACd,6BACEP,EAAQQ,KAAI,SAAAC,GAAM,OACd,+BACG,0CAAaA,EAAOC,UACpB,4BAAKD,EAAOE,YAFNF,EAAOG,SAMtB","file":"static/js/MovieReviewsView.76a241f4.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { fetchMovieReviews } from '../services/books-api';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function MovieReviewesView({ movieId }) {\r\n    const [reviews, setReviews] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchMovieReviews(movieId).then(data => setReviews(data.results));\r\n    }, [movieId]);\r\n\r\n    return(\r\n        <>\r\n            { ((reviews.length > 0))\r\n                ? (<ul >\r\n                    {reviews.map(review =>\r\n                        (<li key={review.id} >\r\n                            <h3>Author: {review.author}</h3>\r\n                            <p >{review.content}</p>\r\n                        </li>)\r\n                    )}\r\n                </ul>)\r\n                : (<p >We don't have any reviews for this movie</p>) }\r\n        </>\r\n    )\r\n}\r\n\r\nMovieReviewesView.propTypes = {\r\n    movieId: PropTypes.string,\r\n};"],"sourceRoot":""}